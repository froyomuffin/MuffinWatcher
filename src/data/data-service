#!/bin/bash

SCRIPTDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)" # http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in

source $SCRIPTDIR/../CONFIG

# Configuration
DATAUPDATEPERIOD="900"
CKANBIN="$WORKSPACE/ckan"

# Cleanup
function reset-workspace() {
    if [[ -e $CKANBIN ]]
    then
        local CKANVERSIONS=$(mono $CKANBIN ksp list | grep -v Listing | sed '/^$/d' | awk -F'"' '{ print $2 }')

        for CKANVERSION in $CKANVERSIONS
        do
            mono $CKANBIN ksp forget $CKANVERSION
        done
    fi

    rm -rf $WORKSPACE
    mkdir -p $WORKSPACE
}

function get-ckan() {
    local TARGETFILE=$1

    [[ -z "$TARGETFILE" ]] && echo "Missing argument!" && exit 1

    local LATESTURL='https://github.com/KSP-CKAN/CKAN/releases/latest'
    local VERSION=$(curl -s $LATESTURL | perl -pe 's/^.*".*\/(.*?)".*$/$1/g')

    local DLURL="https://github.com/KSP-CKAN/CKAN/releases/download/$VERSION/ckan.exe"
    echo "$DLURL to $TARGETFILE"

    wget $DLURL -O $TARGETFILE
}

# Update CKAN
function download-ckan() {
    get-ckan $CKANBIN
}

function create-stub() {
    local VERSION=$1
    local TARGET=$2

    [[ -z "$VERSION" ]] || [[ -z "$TARGET" ]] && echo "Missing argument" && exit 1

    local NAME="$VERSION"
    local STUBDIR="$TARGET/$NAME"

    [[ -e "$STUBDIR" ]] && echo "Stub already exists!" && exit 1

    mkdir -p $STUBDIR
    mkdir -p $STUBDIR/GameData

    echo "Version $VERSION" >> $STUBDIR/readme.txt
}

# Create stubs for latest and reference version installations and link them into CKAN
function create-stubs() {
    create-stub $LATESTVERSION $WORKSPACE

    mono $CKANBIN ksp add $LATESTVERSION $WORKSPACE/$LATESTVERSION
}

# Get modlist of a version
function get-modlist() {
    local VERSION=$1
    mono $CKANBIN ksp default $VERSION &>/dev/null
    mono $CKANBIN update &>/dev/null
    mono $CKANBIN available | grep '\*' | perl -pe 's/^.*? (.*?) \(.*$/$1/g'
}

# Get the modlist for latest version
function build-modlist() {
    echo "Building modlist for version: $LATESTVERSION"
    get-modlist $LATESTVERSION > $LATESTLIST
}

# Main
while true
do
    LATESTVERSION=$(cat $VERSIONFILE)

    reset-workspace
    download-ckan
    create-stubs
    build-modlist

    echo "Sleeping $DATAUPDATEPERIOD"
    sleep $DATAUPDATEPERIOD
done
